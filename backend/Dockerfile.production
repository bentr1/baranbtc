# ========================================
# BTC Baran Backend Production Dockerfile
# Security-focused production build
# ========================================

# Multi-stage build for security and optimization
FROM node:18-alpine AS base

# Security: Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Security: Install security updates and remove unnecessary packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache dumb-init && \
    apk del --purge && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# ========================================
# Build Stage
# ========================================
FROM base AS builder

# Install build dependencies
RUN npm ci

# Copy source code
COPY . .

# Security: Remove development dependencies and sensitive files
RUN rm -rf node_modules && \
    npm ci --only=production

# Build application
RUN npm run build

# ========================================
# Production Stage
# ========================================
FROM base AS production

# Security: Set non-root user
USER nodejs

# Security: Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/certs && \
    chown -R nodejs:nodejs /app

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Security: Copy only necessary files
COPY --chown=nodejs:nodejs docker/postgres/init.sql ./docker/postgres/
COPY --chown=nodejs:nodejs docker/redis/redis.conf ./docker/redis/

# Security: Set proper file permissions
RUN chmod -R 755 /app && \
    chmod 644 /app/package*.json && \
    chmod 644 /app/docker/postgres/init.sql && \
    chmod 644 /app/docker/redis/redis.conf

# Security: Remove unnecessary files and directories
RUN rm -rf /app/src /app/tests /app/docs /app/.git /app/.github /app/.vscode /app/.env* /app/README.md /app/tsconfig.json

# Security: Create security-related directories
RUN mkdir -p /app/security /app/audit /app/backups

# Security: Set environment variables for security
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048 --enable-source-maps"
ENV SECURITY_HEADERS_ENABLED=true
ENV RATE_LIMITING_ENABLED=true
ENV AUDIT_LOGGING_ENABLED=true
ENV INTRUSION_DETECTION_ENABLED=true

# Security: Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Security: Expose only necessary port
EXPOSE 3000

# Security: Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Security: Start application with security flags
CMD ["node", "--max-old-space-size=2048", "--enable-source-maps", "dist/main.js"]

# ========================================
# Security Labels
# ========================================
LABEL maintainer="BTC Baran Security Team <security@btc.nazlihw.com>"
LABEL security="high"
LABEL compliance="OWASP Top 10, GDPR, ISO 27001"
LABEL version="1.0.0"
LABEL description="BTC Baran Backend API - Production Security Build"

# ========================================
# Security Notes
# ========================================
# This Dockerfile implements the following security measures:
# 1. Non-root user execution
# 2. Multi-stage build to reduce attack surface
# 3. Minimal base image (Alpine Linux)
# 4. Security updates installation
# 5. Proper file permissions
# 6. Health checks
# 7. Signal handling with dumb-init
# 8. Environment variable security
# 9. Source map generation for debugging
# 10. Audit logging enabled
# 11. Intrusion detection enabled
# 12. Rate limiting enabled
# 13. Security headers enabled
