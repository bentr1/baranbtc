version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: btcbaran_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available/btc.nazlihw.com:/etc/nginx/sites-available/default:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  # PostgreSQL Database with Encryption
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: btcbaran_postgres
    environment:
      POSTGRES_DB: btcbaran
      POSTGRES_USER: btcbaran_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache with Security
  redis:
    image: redis:7-alpine
    container_name: btcbaran_redis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - btcbaran_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

  # Backend API with Security
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: btcbaran_backend
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      NODE_ENV: production
      HOST: btc.nazlihw.com
      PORT: 3000
      DATABASE_URL: postgresql://btcbaran_user:${POSTGRES_PASSWORD}@postgres:5432/btcbaran?sslmode=require
      REDIS_URL: redis://redis:6379
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SECURITY_HEADERS_ENABLED: true
      RATE_LIMITING_ENABLED: true
      CORS_ORIGIN: https://btc.nazlihw.com
      SESSION_SECURE: true
      SESSION_HTTPONLY: true
      SESSION_SAMESITE: strict
      SECURITY_MONITORING_ENABLED: true
      INTRUSION_DETECTION_ENABLED: true
      AUDIT_LOGGING_ENABLED: true
    volumes:
      - ./logs/backend:/app/logs
      - ./certs:/app/certs:ro
    depends_on:
      - postgres
      - redis
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    user: "1000:1000"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: btcbaran_prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: btcbaran_grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_HTTPONLY: true
      GF_SECURITY_COOKIE_SAMESITE: strict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    depends_on:
      - prometheus

  # Security Monitoring - Fail2ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: btcbaran_fail2ban
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./monitoring/fail2ban:/data:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - btcbaran_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run

  # SSL Certificate Renewal
  certbot:
    image: certbot/certbot:latest
    container_name: btcbaran_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./logs/certbot:/var/log/letsencrypt
      - ./webroot:/var/www/html
    networks:
      - btcbaran_network
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d btc.nazlihw.com
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/btcbaran/postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/btcbaran/redis_data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/btcbaran/prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/btcbaran/grafana_data

networks:
  btcbaran_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: btcbaran_br0
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Security configurations
x-security-defaults: &security-defaults
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp
  user: "1000:1000"
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETGID
    - SETUID
  ulimits:
    nofile:
      soft: 65536
      hard: 65536
    nproc:
      soft: 1024
      hard: 2048
